generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String               @id @default(cuid())
  email         String               @unique
  name          String?
  avatar        String?
  emailVerified DateTime?
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  accounts      Account[]
  notifications Notification[]
  organizations OrganizationMember[]
  sessions      Session[]
  linkedEmails  UserEmail[]

  @@map("users")
}

model UserEmail {
  id                String    @id @default(cuid())
  userId            String
  email             String    @unique
  isPrimary         Boolean   @default(false)
  isVerified        Boolean   @default(false)
  verificationToken String?
  verifiedAt        DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, isPrimary])
  @@index([userId])
  @@map("user_emails")
}

model Organization {
  id            String               @id @default(cuid())
  name          String
  slug          String               @unique
  description   String?
  logo          String?
  taxId         String?
  address       Json?
  timezone      String               @default("America/New_York")
  settings      Json                 @default("{}")
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  integrations  Integration[]
  notifications Notification[]
  members       OrganizationMember[]
  taxPeriods    TaxPeriod[]
  transactions  Transaction[]
  payoutStatuses PayoutStatus[]
  billingPlan   BillingPlan?

  @@map("organizations")
}

model OrganizationMember {
  id             String       @id @default(cuid())
  userId         String
  organizationId String
  role           Role         @default(MEMBER)
  joinedAt       DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@map("organization_members")
}

model Integration {
  id             String            @id @default(cuid())
  organizationId String
  type           IntegrationType
  name           String
  status         IntegrationStatus @default(DISCONNECTED)
  config         Json              @default("{}")
  credentials    Json?
  lastSyncAt     DateTime?
  syncStatus     SyncStatus        @default(IDLE)
  syncError      String?
  webhookUrl     String?
  webhookSecret  String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  organization   Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  transactions   Transaction[]

  @@unique([organizationId, type])
  @@map("integrations")
}

model Transaction {
  id              String            @id @default(cuid())
  organizationId  String
  integrationId   String
  externalId      String
  orderNumber     String?
  invoiceNumber   String?
  type            TransactionType
  status          TransactionStatus
  currency        String            @default("USD")
  subtotal        Int
  taxAmount       Int
  totalAmount     Int
  discountAmount  Int               @default(0)
  shippingAmount  Int               @default(0)
  taxDetails      Json              @default("[]")
  
  // Enhanced tax breakdown fields for compliance reporting
  gstAmount       Int               @default(0)     // GST amount in cents (Canadian Goods and Services Tax)
  pstAmount       Int               @default(0)     // PST amount in cents (Provincial Sales Tax)  
  hstAmount       Int               @default(0)     // HST amount in cents (Harmonized Sales Tax)
  qstAmount       Int               @default(0)     // QST amount in cents (Quebec Sales Tax)
  stateTaxAmount  Int               @default(0)     // State tax amount in cents (US state taxes)
  localTaxAmount  Int               @default(0)     // Local tax amount in cents (municipal/county taxes)
  otherTaxAmount  Int               @default(0)     // Other tax amount in cents (VAT, customs, etc.)
  
  // Detailed tax breakdown with rates, jurisdictions, and amounts
  taxBreakdown    Json              @default("[]")
  
  // Tax jurisdiction information
  taxCountry      String?           // Tax jurisdiction country (ISO 3166-1 alpha-3)
  taxProvince     String?           // Tax jurisdiction province/state code
  taxCity         String?           // Tax jurisdiction city name  
  taxPostalCode   String?           // Tax jurisdiction postal/zip code
  
  taxExempt       Boolean           @default(false)
  taxExemptReason String?
  customerEmail   String?
  customerName    String?
  customerPhone   String?
  billingAddress  Json?
  shippingAddress Json?
  items           Json              @default("[]")
  transactionDate DateTime
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  metadata        Json              @default("{}")
  notes           String?
  integration     Integration       @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  organization    Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, integrationId, externalId])
  @@index([organizationId, transactionDate])
  @@index([organizationId, type])
  @@index([transactionDate])
  @@index([organizationId, taxCountry, taxProvince, transactionDate], name: "idx_tax_jurisdiction")
  @@map("transactions")
}

model TaxPeriod {
  id             String       @id @default(cuid())
  organizationId String
  name           String
  type           PeriodType
  year           Int
  quarter        Int?
  month          Int?
  startDate      DateTime
  endDate        DateTime
  dueDate        DateTime?
  filedDate      DateTime?
  status         FilingStatus @default(DRAFT)
  totalSales     Int          @default(0)
  totalTax       Int          @default(0)
  taxOwed        Int          @default(0)
  taxPaid        Int          @default(0)
  reportData     Json         @default("{}")
  filingData     Json?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, type, year, quarter, month])
  @@index([organizationId, dueDate])
  @@map("tax_periods")
}

model Notification {
  id             String               @id @default(cuid())
  userId         String?
  organizationId String?
  title          String
  message        String
  type           NotificationType
  priority       NotificationPriority @default(MEDIUM)
  channels       Json                 @default("[]")
  status         NotificationStatus   @default(PENDING)
  readAt         DateTime?
  sentAt         DateTime?
  deliveredAt    DateTime?
  metadata       Json                 @default("{}")
  expiresAt      DateTime?
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  organization   Organization?        @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User?                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, status])
  @@index([organizationId, status])
  @@index([createdAt])
  @@map("notifications")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

enum Role {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum IntegrationType {
  SHOPIFY
  SQUARE
  STRIPE
  PAYPAL
  QUICKBOOKS
  XERO
}

enum IntegrationStatus {
  CONNECTED
  DISCONNECTED
  ERROR
  PENDING
  PENDING_USER_LINK
}

enum SyncStatus {
  IDLE
  SYNCING
  SUCCESS
  ERROR
}

enum TransactionType {
  SALE
  REFUND
  PARTIAL_REFUND
  VOID
  ADJUSTMENT
}

enum TransactionStatus {
  PENDING
  COMPLETED
  CANCELLED
  FAILED
  REFUNDED
}

enum PeriodType {
  MONTHLY
  QUARTERLY
  ANNUAL
}

enum FilingStatus {
  DRAFT
  READY
  FILED
  AMENDED
  OVERDUE
}

enum NotificationType {
  TAX_DUE
  SYNC_ERROR
  INTEGRATION_DISCONNECTED
  REPORT_READY
  SYSTEM_UPDATE
  WELCOME
  REMINDER
}

enum NotificationPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum NotificationStatus {
  PENDING
  SENT
  DELIVERED
  READ
  FAILED
}

model PayoutStatus {
  id               String       @id @default(cuid())
  organizationId   String
  payoutId         String       // External payout ID from Shopify
  payoutDate       DateTime
  payoutAmount     Float
  taxAmount        Float
  isSetAside       Boolean      @default(false)
  setAsideAt       DateTime?
  setAsideBy       String?      // Email of user who marked it
  notes            String?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  
  organization     Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  @@unique([organizationId, payoutId])
  @@index([organizationId, payoutDate])
  @@map("payout_statuses")
}

model BillingPlan {
  id                String   @id @default(cuid())
  organizationId    String   @unique
  organization      Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  // Shopify charge IDs
  recurringChargeId String?  @unique
  status           BillingStatus @default(PENDING)
  
  // Pricing
  baseFee          Float    @default(49.00)
  usageRate        Float    @default(0.005) // 0.5%
  currency         String   @default("USD")
  
  // Billing period
  billingStartDate DateTime?
  billingEndDate   DateTime?
  
  // Activation
  activatedAt      DateTime?
  cancelledAt      DateTime?
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Relations
  usageRecords     UsageRecord[]
  invoices         Invoice[]
  
  @@map("billing_plans")
}

model UsageRecord {
  id               String   @id @default(cuid())
  billingPlanId    String
  billingPlan      BillingPlan @relation(fields: [billingPlanId], references: [id], onDelete: Cascade)
  
  // Period
  periodStart      DateTime
  periodEnd        DateTime
  
  // Metrics
  transactionCount Int      @default(0)
  transactionVolume Float   @default(0)
  taxCalculated    Float    @default(0)
  
  // Calculated fees
  usageFee         Float    @default(0)
  
  createdAt        DateTime @default(now())
  
  @@unique([billingPlanId, periodStart, periodEnd])
  @@index([billingPlanId, periodStart])
  @@map("usage_records")
}

model Invoice {
  id               String   @id @default(cuid())
  billingPlanId    String
  billingPlan      BillingPlan @relation(fields: [billingPlanId], references: [id], onDelete: Cascade)
  
  // Shopify charge info
  shopifyUsageChargeId String?
  
  // Period
  periodStart      DateTime
  periodEnd        DateTime
  
  // Amounts
  baseFee          Float
  usageFee         Float
  totalAmount      Float
  currency         String   @default("USD")
  
  // Status
  status           InvoiceStatus @default(PENDING)
  paidAt           DateTime?
  
  createdAt        DateTime @default(now())
  
  @@index([billingPlanId, periodStart])
  @@map("invoices")
}

enum BillingStatus {
  PENDING          // Awaiting charge confirmation
  ACTIVE           // Paid and active
  CANCELLED        // Merchant cancelled
  EXPIRED          // Payment failed
}

enum InvoiceStatus {
  PENDING
  PAID
  FAILED
  CANCELLED
}
